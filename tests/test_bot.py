import pytest
from unittest.mock import AsyncMock, patch, MagicMock
from aiogram.types import Message, PhotoSize
from app.bot.bot import send_welcome, send_help, handle_photo, handle_unknown
from app.bot.producer import ImageProducer

# Test bot.py functionality
@pytest.mark.asyncio
async def test_start_command():
    message = AsyncMock()
    message.reply = AsyncMock()

    await send_welcome(message)  # Directly call the handler for /start
    message.reply.assert_called_with(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. üëã\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. üñº"
    )

@pytest.mark.asyncio
async def test_help_command():
    message = AsyncMock()
    message.reply = AsyncMock()

    await send_help(message)  # Directly call the handler for /help
    message.reply.assert_called_with(
        "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ (–Ω–µ –∫–∞–∫ —Ñ–∞–π–ª)\n"
        "2. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )

@pytest.mark.asyncio
async def test_handle_photo():
    message = AsyncMock()
    message.reply = AsyncMock()
    message.photo = [PhotoSize(file_id="file_123", file_unique_id="unique_id_123", width=1280, height=720)]

    with patch("app.bot.producer.ImageProducer.send_image", new_callable=AsyncMock) as mock_send_image, \
         patch("app.bot.bot.bot.download", new_callable=AsyncMock) as mock_download:
        mock_download.return_value = None  # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        await handle_photo(message)  # Directly call the handler for photo messages
        message.reply.assert_called_with("üì• –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        mock_send_image.assert_awaited_once()

@pytest.mark.asyncio
async def test_handle_unknown():
    message = AsyncMock()
    message.reply = AsyncMock()

    await handle_unknown(message)  # Directly call the handler for unknown messages
    message.reply.assert_called_with(
        "ü§î –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )